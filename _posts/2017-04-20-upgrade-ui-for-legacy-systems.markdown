---
layout:     post
title:      "旧网站UI升级的困境"
subtitle:   ""
date:       2017-04-20 23:34:00
author:     "xuzp"
header-img: "img/post-header/wx-common.jpg"
catalog: false
tags:
    - 技术
    - WX
---

已经运营了近二十年的公司网站已经非常老旧了，于是UI组打算做些改变——在Bootstrap基础上构建公司的UI组件库，让Rnd开发页面更方便，并且提升网站整体的颜值。

呼啦啦一年半，公司的组件库从1.0升到了3.0，可是由于网站平台太大无法做到全线使用，大部分模块仍然在使用老旧的UI ，一些半新不旧的模块在用过时的2.0组件，新做模块在使用3.0新组件做小白鼠... 于是，旧的类样式和原生Bootstrap代码，公司定制的组件代码和客户的自定义样式功能等等混杂在一起。最终，没有预想中加快Rnd开发速度（Rnd在使用组件中常会遇见搞不掂的问题 ）；新模块的界面确实美观很多，但是和效果图仍然有差距，并且整个网站平台新旧UI有点不搭调。

老旧的大型平台升级UI本就是极其艰巨的任务。在资源有限的情况下，或者选择在旧UI上做微调（如之前十多年做的那样，放弃UI升级），或者以大魄力去拥抱新技术（会有极大的风险和成本）。造成今天的被动是因为早几年公司的技术保守以及选型失败。对于大平台而言，尽早拥有自己的UI库是明智的。而对于一些中小型网站来说，保持技术敏感性并且让UI代码轻而快是比较好的方法。不管怎么样，都不要提供太多的CSS自定义的功能，那是搬石头砸自己的脚。

—— xuzp 记于 2017.4.20
